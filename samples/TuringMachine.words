// Symbols that can appear on a tape
A symbol is a thing.

A tape_creator is a thing which {
	can create_a_tape with tape_row, tape_length which means {
		Its column is -tape_length/2.
		Its row is tape_row.
		Repeat tape_length times {
			Blank is a symbol at its column, its row.
			Its column is its column + 1.
		}
	}
	can remove_itself which means {
		Remove it.
	}
}

// Common methods of Turing Machine heads
A head is a thing which {
	can write_blank which means {
		Blank is a symbol at its column, its row - 1.
	}
	can write_zero which means {
		Zero is a symbol at its column, its row - 1.
		Zero's value is 0.
	}
	can write_one which means {
		One is a symbol at its column, its row - 1.
		One's value is 1.
	}
	can process_symbol with symbol, value which means {
		// Subclasses should override with that machine's program
		Make it wait 1.
	}
}

// A Turing Machine that counts in binary
// See https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/four.html#counter
A counter is a head which {
	can process_symbol with symbol, value which means {
		If not(its state = nothing) then {
			Remove symbol.

			If its state = 0 then {
				Its state is nothing.
				If value = nothing then {
					Make it write_blank.
					Make it move left.
					Make its state be 1.
				}
				If value = 0 then {
					Make it write_zero.
					Make it move right.
					Make its state be 0.
				}
				If value = 1 then {
					Make it write_one.
					Make it move right.
					Make its state be 0.
				}
			}

			If its state = 1 then {
				Its state is nothing.
				If value = nothing then {
					Make it write_one.
					Make it move right.
					Make its state be 2.
				}
				If value = 0 then {
					Make it write_one.
					Make it move left.
					Make its state be 2.
				}
				If value = 1 then {
					Make it write_zero.
					Make it move left.
					Make its state be 1.
				}
			}

			If its state = 2 then {
				Its state is nothing.
				If value = nothing then {
					Make it write_blank.
					Make it move left.
					Make its state be 0.
				}
				If value = 0 then {
					Make it write_zero.
					Make it move right.
					Make its state be 2.
				}
				If value = 1 then {
					Make it write_one.
					Make it move right.
					Make its state be 2.
				}
			}
		}
	}
}

// A simple Turing Machine that is universal
// See http://en.wikipedia.org/wiki/Wolfram's_2-state_3-symbol_Turing_machine
A tm23 is a head which {
	can process_symbol with symbol, value which means {
		If not(its state = nothing) then {
			Remove symbol.

			If its state = 0 then {
				Its state is nothing.
				If value = nothing then {
					Make it write_zero.
					Make it move right.
					Make its state be 1.
				}
				If value = 0 then {
					Make it write_one.
					Make it move left.
					Make its state be 0.
				}
				If value = 1 then {
					Make it write_zero.
					Make it move left.
					Make its state be 0.
				}
			}

			If its state = 1 then {
				Its state is nothing.
				If value = nothing then {
					Make it write_one.
					Make it move left.
					Make its state be 0.
				}
				If value = 0 then {
					Make it write_one.
					Make it move right.
					Make its state be 1.
				}
				If value = 1 then {
					Make it write_blank.
					Make it move right.
					Make its state be 0.
				}
			}
		}
	}
}

// Generate two tapes
Tape_Creator is a tape_creator at -1000,-1000.
Make Tape_Creator create_a_tape with tape_row -2, tape_length 200.
Make Tape_Creator create_a_tape with tape_row 2, tape_length 200.
Make Tape_Creator remove_itself.

// Create a counter machine on one tape
Counter is a counter at 2,-1.
Counter's state is 0.

// Create a two-state three-symbol machine on the other tape
TM23 is a tm23 at 0,3.
TM23's state is 0.

Whenever a head [h] is above a symbol [s] {
	Make h process_symbol with symbol s, value s's value.
}