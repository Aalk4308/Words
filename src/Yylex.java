/* The following code was generated by JFlex 1.6.0 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2000 Gerwin Klein <lsf@jflex.de>                          *
 * All rights reserved.                                                    *
 *                                                                         *
 * Thanks to Larry Bell and Bob Jamison for suggestions and comments.      *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Words.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\50\1\47\1\7\2\0\1\47\22\0\1\47\1\0\1\6"+
    "\4\0\1\3\1\13\1\13\1\13\1\13\1\13\1\13\1\5\1\13"+
    "\12\2\2\0\1\12\1\11\1\10\2\0\1\14\7\1\1\31\3\1"+
    "\1\36\4\1\1\42\1\44\3\1\1\46\3\1\3\0\1\13\1\1"+
    "\1\0\1\15\1\26\1\27\1\17\1\23\1\32\1\35\1\22\1\33"+
    "\1\1\1\37\1\34\1\40\1\16\1\30\1\43\1\1\1\24\1\4"+
    "\1\25\1\45\1\41\1\21\1\1\1\20\1\1\1\13\1\0\1\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\1\1\5"+
    "\2\4\2\6\22\2\1\7\1\10\2\0\1\2\1\0"+
    "\1\11\1\12\1\13\1\14\2\6\1\15\12\2\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\7\2\1\23\1\2"+
    "\1\24\1\3\1\25\1\26\1\2\1\27\1\30\4\2"+
    "\1\31\5\2\1\32\12\2\1\33\2\2\1\34\1\35"+
    "\1\2\1\36\1\2\1\37\1\40\2\2\1\41\1\42"+
    "\1\43\1\2\1\44\2\2\1\45\4\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\3\2\1\54\2\2\1\55"+
    "\1\56\2\2\1\57\1\2\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\51\0\315\0\51"+
    "\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\51"+
    "\0\u04a5\0\u04ce\0\u04f7\0\315\0\51\0\51\0\51\0\122"+
    "\0\122\0\u0520\0\122\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\122\0\u06e3\0\122"+
    "\0\122\0\122\0\122\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\122\0\u082b\0\51\0\u04ce\0\u0854\0\122"+
    "\0\u087d\0\122\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\122"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\122\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\122\0\u0bda\0\u0c03\0\122\0\u0c2c\0\u0c55\0\122\0\u0c7e"+
    "\0\122\0\122\0\u0ca7\0\u0cd0\0\122\0\122\0\122\0\u0cf9"+
    "\0\u0d22\0\u0d4b\0\u0d74\0\122\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\122\0\122\0\122\0\122\0\122\0\122\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\122\0\u0ebc\0\u0ee5\0\122\0\122\0\u0f0e\0\u0f37"+
    "\0\122\0\u0f60\0\122\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\6\1\13\1\14\1\15\1\16"+
    "\1\3\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\3\1\27\1\30\1\3\1\31\1\3"+
    "\1\32\1\3\1\33\1\3\1\34\1\35\1\36\1\37"+
    "\1\40\52\0\2\3\1\41\1\3\7\0\33\3\4\0"+
    "\1\4\2\0\1\42\44\0\2\3\1\41\1\3\7\0"+
    "\1\3\1\43\31\3\2\0\6\44\1\45\1\0\41\44"+
    "\11\0\1\46\50\0\1\47\40\0\2\3\1\41\1\50"+
    "\7\0\2\3\1\51\30\3\3\0\2\3\1\41\1\50"+
    "\7\0\2\3\1\52\6\3\1\53\21\3\3\0\2\3"+
    "\1\41\1\3\7\0\14\3\1\54\16\3\3\0\2\3"+
    "\1\41\1\3\7\0\14\3\1\55\16\3\3\0\2\3"+
    "\1\41\1\3\7\0\1\3\1\56\4\3\1\57\10\3"+
    "\1\60\13\3\3\0\2\3\1\41\1\3\7\0\1\3"+
    "\1\61\31\3\3\0\2\3\1\41\1\3\7\0\17\3"+
    "\1\62\13\3\3\0\2\3\1\41\1\3\7\0\6\3"+
    "\1\63\10\3\1\64\11\3\1\65\1\3\3\0\2\3"+
    "\1\41\1\3\7\0\7\3\1\66\23\3\3\0\2\3"+
    "\1\41\1\3\7\0\1\3\1\67\31\3\3\0\2\3"+
    "\1\41\1\3\7\0\10\3\1\70\5\3\1\71\14\3"+
    "\3\0\2\3\1\41\1\3\7\0\16\3\1\72\14\3"+
    "\3\0\2\3\1\41\1\73\7\0\33\3\3\0\2\3"+
    "\1\41\1\3\7\0\7\3\1\74\4\3\1\75\16\3"+
    "\3\0\2\3\1\41\1\3\7\0\1\3\1\76\31\3"+
    "\3\0\2\3\1\41\1\3\7\0\7\3\1\77\4\3"+
    "\1\100\16\3\3\0\2\3\1\41\1\3\7\0\7\3"+
    "\1\101\23\3\3\0\2\3\1\41\1\3\7\0\11\3"+
    "\1\102\21\3\3\0\2\3\1\41\1\3\7\0\27\3"+
    "\1\103\3\3\3\0\2\3\1\41\1\3\7\0\6\3"+
    "\1\104\24\3\51\0\1\37\5\0\1\105\46\0\1\106"+
    "\47\0\2\3\1\41\1\3\7\0\4\3\1\107\26\3"+
    "\3\0\2\3\1\41\1\3\7\0\3\3\1\110\1\111"+
    "\26\3\3\0\2\3\1\41\1\3\7\0\5\3\1\112"+
    "\3\3\1\113\21\3\3\0\2\3\1\41\1\3\7\0"+
    "\5\3\1\114\25\3\3\0\2\3\1\41\1\3\7\0"+
    "\17\3\1\115\13\3\3\0\2\3\1\41\1\3\7\0"+
    "\17\3\1\116\13\3\3\0\2\3\1\41\1\3\7\0"+
    "\11\3\1\117\21\3\3\0\2\3\1\41\1\120\7\0"+
    "\33\3\3\0\2\3\1\41\1\3\7\0\21\3\1\121"+
    "\11\3\3\0\2\3\1\41\1\3\7\0\1\3\1\122"+
    "\5\3\1\123\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\24\3\1\124\6\3\3\0\2\3\1\41\1\3\7\0"+
    "\10\3\1\125\22\3\3\0\2\3\1\41\1\3\7\0"+
    "\2\3\1\126\30\3\3\0\2\3\1\41\1\3\7\0"+
    "\16\3\1\127\14\3\3\0\2\3\1\41\1\3\7\0"+
    "\2\3\1\130\30\3\3\0\2\3\1\41\1\3\7\0"+
    "\23\3\1\131\7\3\3\0\2\3\1\41\1\3\7\0"+
    "\1\3\1\132\31\3\3\0\2\3\1\41\1\3\7\0"+
    "\25\3\1\133\5\3\3\0\2\3\1\41\1\3\7\0"+
    "\24\3\1\134\2\3\1\135\3\3\3\0\2\3\1\41"+
    "\1\3\7\0\14\3\1\136\16\3\3\0\2\3\1\41"+
    "\1\3\7\0\7\3\1\137\7\3\1\140\13\3\3\0"+
    "\2\3\1\41\1\141\7\0\33\3\3\0\2\3\1\41"+
    "\1\3\7\0\5\3\1\142\25\3\3\0\2\3\1\41"+
    "\1\3\7\0\6\3\1\143\24\3\3\0\2\3\1\41"+
    "\1\3\7\0\2\3\1\144\30\3\3\0\2\3\1\41"+
    "\1\3\7\0\11\3\1\145\21\3\3\0\2\3\1\41"+
    "\1\3\7\0\13\3\1\146\17\3\3\0\2\3\1\41"+
    "\1\3\7\0\6\3\1\147\24\3\3\0\2\3\1\41"+
    "\1\3\7\0\6\3\1\150\24\3\3\0\2\3\1\41"+
    "\1\3\7\0\11\3\1\151\21\3\3\0\2\3\1\41"+
    "\1\3\7\0\2\3\1\152\30\3\3\0\2\3\1\41"+
    "\1\3\7\0\7\3\1\153\23\3\3\0\2\3\1\41"+
    "\1\3\7\0\2\3\1\154\30\3\3\0\2\3\1\41"+
    "\1\3\7\0\11\3\1\155\21\3\3\0\2\3\1\41"+
    "\1\3\7\0\21\3\1\156\11\3\3\0\2\3\1\41"+
    "\1\3\7\0\7\3\1\157\23\3\3\0\2\3\1\41"+
    "\1\3\7\0\2\3\1\160\30\3\3\0\2\3\1\41"+
    "\1\3\7\0\7\3\1\161\23\3\3\0\2\3\1\41"+
    "\1\3\7\0\14\3\1\162\16\3\3\0\2\3\1\41"+
    "\1\3\7\0\7\3\1\163\23\3\3\0\2\3\1\41"+
    "\1\3\7\0\27\3\1\164\3\3\3\0\2\3\1\41"+
    "\1\3\7\0\2\3\1\165\30\3\3\0\2\3\1\41"+
    "\1\3\7\0\20\3\1\166\12\3\3\0\2\3\1\41"+
    "\1\3\7\0\6\3\1\167\24\3\3\0\2\3\1\41"+
    "\1\3\7\0\17\3\1\170\13\3\3\0\2\3\1\41"+
    "\1\171\7\0\33\3\3\0\2\3\1\41\1\3\7\0"+
    "\6\3\1\151\24\3\3\0\2\3\1\41\1\3\7\0"+
    "\11\3\1\172\21\3\3\0\2\3\1\41\1\173\7\0"+
    "\33\3\3\0\2\3\1\41\1\174\7\0\33\3\3\0"+
    "\2\3\1\41\1\175\7\0\33\3\3\0\2\3\1\41"+
    "\1\176\7\0\33\3\3\0\2\3\1\41\1\3\7\0"+
    "\25\3\1\177\5\3\3\0\2\3\1\41\1\3\7\0"+
    "\1\3\1\200\31\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\201\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\202\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\203\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\2\3\1\204\30\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\205\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\11\3\1\206\21\3\3\0\2\3\1\41\1\3\7\0"+
    "\25\3\1\207\5\3\3\0\2\3\1\41\1\3\7\0"+
    "\10\3\1\210\22\3\3\0\2\3\1\41\1\3\7\0"+
    "\21\3\1\211\11\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\212\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\7\3\1\213\23\3\3\0\2\3\1\41\1\3\7\0"+
    "\10\3\1\214\22\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3977];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\27\1\1\11"+
    "\2\0\1\1\1\0\3\11\35\1\1\11\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Words yyparser;
  public int lineNumber = 1;

  public Yylex(java.io.Reader r, Words yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.err.println("Error: unexpected character '" + yytext() + "'"); return -1;
          }
        case 50: break;
        case 2: 
          { yyparser.yylval = new WordsVal(yytext()); return Words.IDENTIFIER;
          }
        case 51: break;
        case 3: 
          { yyparser.yylval = new WordsVal(Double.parseDouble(yytext())); return Words.NUM;
          }
        case 52: break;
        case 4: 
          { return (int) yycharat(0);
          }
        case 53: break;
        case 5: 
          { lineNumber++;
          }
        case 54: break;
        case 6: 
          { return Words.A;
          }
        case 55: break;
        case 7: 
          { 
          }
        case 56: break;
        case 8: 
          { System.err.println("Sorry, backspace doesn't work");
          }
        case 57: break;
        case 9: 
          { yyparser.yylval = new WordsVal(yytext());	return Words.STRING;
          }
        case 58: break;
        case 10: 
          { return Words.GEQ;
          }
        case 59: break;
        case 11: 
          { return Words.LEQ;
          }
        case 60: break;
        case 12: 
          { return Words.AS;
          }
        case 61: break;
        case 13: 
          { return Words.AT;
          }
        case 62: break;
        case 14: 
          { return Words.BE;
          }
        case 63: break;
        case 15: 
          { return Words.OR;
          }
        case 64: break;
        case 16: 
          { return Words.OF;
          }
        case 65: break;
        case 17: 
          { return Words.IF;
          }
        case 66: break;
        case 18: 
          { return Words.IS;
          }
        case 67: break;
        case 19: 
          { return Words.UP;
          }
        case 68: break;
        case 20: 
          { yyparser.yylval = new WordsVal(yytext()); return Words.REFERENCE;
          }
        case 69: break;
        case 21: 
          { return Words.SAY;
          }
        case 70: break;
        case 22: 
          { return Words.AND;
          }
        case 71: break;
        case 23: 
          { return Words.NOW;
          }
        case 72: break;
        case 24: 
          { return Words.NOT;
          }
        case 73: break;
        case 25: 
          { return Words.HAS;
          }
        case 74: break;
        case 26: 
          { return Words.CAN;
          }
        case 75: break;
        case 27: 
          { return Words.SAYS;
          }
        case 76: break;
        case 28: 
          { return Words.DOWN;
          }
        case 77: break;
        case 29: 
          { return Words.WAIT;
          }
        case 78: break;
        case 30: 
          { return Words.WITH;
          }
        case 79: break;
        case 31: 
          { return Words.WHICH;
          }
        case 80: break;
        case 32: 
          { return Words.THEN;
          }
        case 81: break;
        case 33: 
          { return Words.LEFT;
          }
        case 82: break;
        case 34: 
          { return Words.LONG;
          }
        case 83: break;
        case 35: 
          { return Words.MAKE;
          }
        case 84: break;
        case 36: 
          { return Words.MOVE;
          }
        case 85: break;
        case 37: 
          { return Words.STOP;
          }
        case 86: break;
        case 38: 
          { return Words.WAITS;
          }
        case 87: break;
        case 39: 
          { return Words.RIGHT;
          }
        case 88: break;
        case 40: 
          { return Words.TIMES;
          }
        case 89: break;
        case 41: 
          { return Words.TURNS;
          }
        case 90: break;
        case 42: 
          { return Words.MEANS;
          }
        case 91: break;
        case 43: 
          { return Words.MOVES;
          }
        case 92: break;
        case 44: 
          { return Words.WHILE;
          }
        case 93: break;
        case 45: 
          { return Words.REMOVE;
          }
        case 94: break;
        case 46: 
          { return Words.REPEAT;
          }
        case 95: break;
        case 47: 
          { return Words.NOTHING;
          }
        case 96: break;
        case 48: 
          { return Words.ANYWHERE;
          }
        case 97: break;
        case 49: 
          { return Words.WHENEVER;
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
